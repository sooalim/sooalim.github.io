# Azure DevOps Release Pipeline for RAG Agent
# This pipeline deploys the RAG agent to UAT and Production environments

trigger: none # Only triggered manually or by CI pipeline

pr: none

variables:
  # Common variables
  vmImage: 'ubuntu-latest'
  pythonVersion: '3.11'
  projectName: 'rag-agent'
  artifactName: 'rag-agent-package-validated'

stages:
  - stage: PreDeployment
    displayName: 'Pre-deployment Validation'
    jobs:
      - job: PreDeploymentChecks
        displayName: 'Pre-deployment Checks'
        pool:
          vmImage: $(vmImage)
        
        steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download build artifacts'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: '$(artifactName)'
              downloadPath: '$(System.ArtifactsDirectory)'

          - script: |
              echo "Validating deployment prerequisites..."
              
              # Check if all required files are present
              cd $(System.ArtifactsDirectory)/$(artifactName)
              
              if [ ! -f "package-manifest.json" ]; then
                echo "ERROR: Package manifest not found"
                exit 1
              fi
              
              if [ ! -f "version.txt" ]; then
                echo "ERROR: Version file not found"
                exit 1
              fi
              
              echo "Build Version: $(cat version.txt)"
              echo "Commit: $(cat commit.txt)"
              
              echo "Pre-deployment validation completed successfully"
            displayName: 'Validate prerequisites'

  - stage: DeployUAT
    displayName: 'Deploy to UAT'
    dependsOn: PreDeployment
    condition: succeeded()
    variables:
      - group: RAG-Agent-UAT
      - name: environmentName
        value: 'UAT'
      - name: resourceGroupName
        value: 'rg-rag-agent-uat'
    
    jobs:
      - deployment: DeployUATJob
        displayName: 'Deploy to UAT Environment'
        pool:
          vmImage: $(vmImage)
        environment: 'UAT'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadBuildArtifacts@0
                  displayName: 'Download build artifacts'
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: '$(artifactName)'
                    downloadPath: '$(System.ArtifactsDirectory)'

                - task: AzureCLI@2
                  displayName: 'Deploy Infrastructure'
                  inputs:
                    azureSubscription: 'Azure-Service-Connection'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      cd $(System.ArtifactsDirectory)/$(artifactName)
                      
                      # Deploy infrastructure using Bicep
                      echo "Deploying infrastructure to UAT..."
                      az deployment group create \
                        --resource-group $(resourceGroupName) \
                        --template-file infrastructure/bicep/main.bicep \
                        --parameters environment=$(environmentName) \
                        --parameters projectName=$(projectName) \
                        --parameters openAIApiKey=$(openAIApiKey) \
                        --parameters location=$(location)

                - task: AzureFunctionApp@1
                  displayName: 'Deploy Azure Functions'
                  inputs:
                    azureSubscription: 'Azure-Service-Connection'
                    appType: 'functionAppLinux'
                    appName: 'func-$(projectName)-$(environmentName)'
                    package: '$(System.ArtifactsDirectory)/$(artifactName)/src/azure-functions/data-refresh-function'
                    runtimeStack: 'PYTHON|3.11'
                    appSettings: |
                      -AZURE_STORAGE_CONNECTION_STRING "$(storageConnectionString)"
                      -AZURE_OPENAI_API_KEY "$(openAIApiKey)"
                      -AZURE_OPENAI_ENDPOINT "$(openAIEndpoint)"
                      -AZURE_SEARCH_SERVICE_NAME "$(searchServiceName)"
                      -AZURE_SEARCH_API_KEY "$(searchApiKey)"
                      -ENVIRONMENT "$(environmentName)"

                - task: AzureCLI@2
                  displayName: 'Deploy Data Processing Scripts'
                  inputs:
                    azureSubscription: 'Azure-Service-Connection'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      cd $(System.ArtifactsDirectory)/$(artifactName)
                      
                      # Create deployment container
                      echo "Creating deployment container..."
                      az storage container create \
                        --name deployment \
                        --account-name "st$(projectName)$(environmentName)" \
                        --connection-string "$(storageConnectionString)"
                      
                      # Upload source code
                      echo "Uploading source code..."
                      az storage blob upload-batch \
                        --destination deployment/src \
                        --source src/ \
                        --connection-string "$(storageConnectionString)"

                - task: AzureCLI@2
                  displayName: 'Configure Copilot Studio Integration'
                  inputs:
                    azureSubscription: 'Azure-Service-Connection'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      cd $(System.ArtifactsDirectory)/$(artifactName)
                      
                      # Configure API connections for Copilot Studio
                      echo "Configuring Copilot Studio integration..."
                      
                      # Create API Management instance if needed
                      echo "Checking API Management configuration..."
                      
                      # Note: Copilot Studio configuration typically requires manual setup
                      # This step prepares the API endpoints that Copilot Studio will consume
                      echo "API endpoints ready for Copilot Studio integration"

                - script: |
                    echo "Running smoke tests..."
                    cd $(System.ArtifactsDirectory)/$(artifactName)
                    
                    # Basic connectivity tests
                    echo "Testing Azure Functions endpoint..."
                    curl -f "https://func-$(projectName)-$(environmentName).azurewebsites.net/api/health" || echo "Health check failed"
                    
                    echo "UAT deployment smoke tests completed"
                  displayName: 'Smoke Tests'

      - job: UATValidation
        displayName: 'UAT Validation'
        dependsOn: DeployUATJob
        condition: succeeded()
        pool:
          vmImage: $(vmImage)
        
        steps:
          - task: UsePythonVersion@0
            displayName: 'Use Python $(pythonVersion)'
            inputs:
              versionSpec: '$(pythonVersion)'
              addToPath: true

          - task: DownloadBuildArtifacts@0
            displayName: 'Download build artifacts'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: '$(artifactName)'
              downloadPath: '$(System.ArtifactsDirectory)'

          - script: |
              # Install test dependencies
              pip install requests pytest
              
              # Run UAT validation tests
              cd $(System.ArtifactsDirectory)/$(artifactName)
              
              echo "Running UAT validation tests..."
              # Add UAT-specific test commands here
              
              echo "UAT validation completed successfully"
            displayName: 'UAT Validation Tests'

  - stage: ApprovalGate
    displayName: 'Production Approval'
    dependsOn: DeployUAT
    condition: succeeded()
    jobs:
      - job: waitForValidation
        displayName: 'Wait for Production Approval'
        pool: server
        timeoutInMinutes: 4320 # 3 days
        steps:
          - task: ManualValidation@0
            displayName: 'Manual Validation for Production'
            inputs:
              notifyUsers: |
                $(Build.RequestedForEmail)
              instructions: 'Please validate the UAT deployment and approve for production deployment'
              onTimeout: 'reject'

  - stage: DeployProduction
    displayName: 'Deploy to Production'
    dependsOn: ApprovalGate
    condition: succeeded()
    variables:
      - group: RAG-Agent-Production
      - name: environmentName
        value: 'Production'
      - name: resourceGroupName
        value: 'rg-rag-agent-prod'
    
    jobs:
      - deployment: DeployProductionJob
        displayName: 'Deploy to Production Environment'
        pool:
          vmImage: $(vmImage)
        environment: 'Production'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadBuildArtifacts@0
                  displayName: 'Download build artifacts'
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: '$(artifactName)'
                    downloadPath: '$(System.ArtifactsDirectory)'

                - task: AzureCLI@2
                  displayName: 'Create Backup'
                  inputs:
                    azureSubscription: 'Azure-Service-Connection'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      echo "Creating production backup..."
                      
                      # Create backup of current deployment
                      BACKUP_NAME="backup-$(date +%Y%m%d-%H%M%S)"
                      
                      # Backup Function App
                      echo "Backing up Function App..."
                      # Add backup logic here
                      
                      echo "Production backup completed: $BACKUP_NAME"

                - task: AzureCLI@2
                  displayName: 'Deploy Infrastructure'
                  inputs:
                    azureSubscription: 'Azure-Service-Connection'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      cd $(System.ArtifactsDirectory)/$(artifactName)
                      
                      # Deploy infrastructure using Bicep
                      echo "Deploying infrastructure to Production..."
                      az deployment group create \
                        --resource-group $(resourceGroupName) \
                        --template-file infrastructure/bicep/main.bicep \
                        --parameters environment=$(environmentName) \
                        --parameters projectName=$(projectName) \
                        --parameters openAIApiKey=$(openAIApiKey) \
                        --parameters location=$(location)

                - task: AzureFunctionApp@1
                  displayName: 'Deploy Azure Functions'
                  inputs:
                    azureSubscription: 'Azure-Service-Connection'
                    appType: 'functionAppLinux'
                    appName: 'func-$(projectName)-$(environmentName)'
                    package: '$(System.ArtifactsDirectory)/$(artifactName)/src/azure-functions/data-refresh-function'
                    runtimeStack: 'PYTHON|3.11'
                    deployToSlotOrASE: true
                    slotName: 'staging'
                    appSettings: |
                      -AZURE_STORAGE_CONNECTION_STRING "$(storageConnectionString)"
                      -AZURE_OPENAI_API_KEY "$(openAIApiKey)"
                      -AZURE_OPENAI_ENDPOINT "$(openAIEndpoint)"
                      -AZURE_SEARCH_SERVICE_NAME "$(searchServiceName)"
                      -AZURE_SEARCH_API_KEY "$(searchApiKey)"
                      -ENVIRONMENT "$(environmentName)"

                - script: |
                    echo "Running production smoke tests..."
                    
                    # Test staging slot
                    echo "Testing staging slot..."
                    curl -f "https://func-$(projectName)-$(environmentName)-staging.azurewebsites.net/api/health" || echo "Staging health check failed"
                    
                    echo "Production smoke tests completed"
                  displayName: 'Production Smoke Tests'

                - task: AzureAppServiceManage@0
                  displayName: 'Swap Slots'
                  inputs:
                    azureSubscription: 'Azure-Service-Connection'
                    WebAppName: 'func-$(projectName)-$(environmentName)'
                    ResourceGroupName: '$(resourceGroupName)'
                    SourceSlot: 'staging'
                    SwapWithProduction: true

                - script: |
                    echo "Running post-deployment validation..."
                    
                    # Validate production deployment
                    echo "Testing production endpoint..."
                    curl -f "https://func-$(projectName)-$(environmentName).azurewebsites.net/api/health" || echo "Production health check failed"
                    
                    echo "Production validation completed"
                  displayName: 'Post-deployment Validation'

  - stage: PostDeployment
    displayName: 'Post-deployment Tasks'
    dependsOn: DeployProduction
    condition: succeeded()
    jobs:
      - job: PostDeploymentTasks
        displayName: 'Post-deployment Tasks'
        pool:
          vmImage: $(vmImage)
        
        steps:
          - task: AzureCLI@2
            displayName: 'Configure Monitoring'
            inputs:
              azureSubscription: 'Azure-Service-Connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Configuring monitoring and alerting..."
                
                # Configure Application Insights
                echo "Configuring Application Insights..."
                
                # Set up alerts
                echo "Setting up alerts..."
                
                # Configure dashboard
                echo "Configuring monitoring dashboard..."
                
                echo "Monitoring configuration completed"

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Deployment Report'
            inputs:
              pathToPublish: '$(System.ArtifactsDirectory)'
              artifactName: 'deployment-report'
              publishLocation: 'Container'

          - script: |
              echo "Sending deployment notification..."
              
              # Send success notification
              echo "Deployment completed successfully"
              echo "Environment: Production"
              echo "Version: $(Build.BuildNumber)"
              echo "Deployed by: $(Build.RequestedFor)"
              
              # Add notification logic here (Teams, Email, etc.)
            displayName: 'Deployment Notification'
